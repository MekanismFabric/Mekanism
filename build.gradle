plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT' apply false
	id 'maven-publish'
	id 'java-library'
	id 'idea'
}

version = project.mod_version
logger.lifecycle("Building Mekanism: " + version)

static def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
	project.dependencies {
		deps.each {
			api it
		}
	}
}

allprojects {
	apply plugin: "java-library"
	apply plugin: "fabric-loom"
	apply plugin: "maven-publish"
	apply plugin: "idea"

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
		it.options.release = 17
	}

	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
	group = project.maven_group

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	loom {
		splitEnvironmentSourceSets()

		runs {
			testmodClient {
				client()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Client"
				source sourceSets.testmod
			}
			testmodServer {
				server()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Server"
				source sourceSets.testmod
			}
		}
	}

	dependencies {
		// To change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// Fabric API. This is technically optional, but you probably want it anyway.
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

		modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
			exclude(module: "fabric-api")
		}
		modRuntimeOnly("com.terraformersmc:modmenu:${project.mod_menu_version}") {
			transitive(false)
		}

		modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}"
		modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${project.wthit_version}"

		modCompileOnly "me.shedaniel:RoughlyEnoughItems-api:${project.rei_version}"

		implementation 'com.electronwill.night-config:toml:3.6.0'
	}

	configurations { dev }

	repositories {
		mavenLocal()
		maven { url "https://maven.shedaniel.me" }
		maven { url "https://maven.terraformersmc.com/releases" }
		maven {
			url "https://maven2.bai.lol"
			content {
				includeGroup "lol.bai"
				includeGroup "mcp.mobius.waila"
			}
		}
		maven {
			name = "Technici4n"
			url = "https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/"
			content {
				includeGroup "dev.technici4n"
				includeGroup "net.fabricmc.fabric-api" // until ItemApiLookup PR #1352 is merged.
			}
		}
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}"}
		}
		archiveClassifier = "dev"
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/devlibs/$archivesBaseName-$version-dev.jar")
			archiveFileName = "${archivesBaseName}-${version}.jar"
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-$version-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.version

			filesMatching("fabric.mod.json") {
				expand "version": project.version
			}
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier = "sources"
		from sourceSets.main.allSource
	}

	tasks.withType(AbstractArchiveTask) {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}
}

dependencies {
	afterEvaluate {
		subprojects.each {
			api project(path: ":${it.name}", configuration: "dev")
			include project("${it.name}:")
		}
	}
}